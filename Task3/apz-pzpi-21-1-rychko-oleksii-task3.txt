1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

IoT частина системи взаємодіє з двома типами користувачів: лікарі та дитини. Пряма взаємодія з користувачами відбувається за допомогою монітора, на який виводяться збережені сенсором дані, його ліміти та частоту збору даних.
Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію користувача із системою.
 
2 ПРОГРАМНА РЕАЛІЗАЦІЯ

Для демонстрації функціональних можливостей IoT частини системи було вирішено реалізувати програмний код мовою C#, оптимізований для відповідності апаратним обмеженням IoT пристроїв завдяки компіляції у режимі Native AoT. Програма використовує консольний інтерфейс (CLI) для виведення інформації та бібліотеку System.Net.Http для надсилання даних у форматі JSON.
Програма призначена для тривалого функціонування на сервері, де зберігається таблиця з ідентифікаторами, які можна присвоювати IoT пристроям. Це дозволяє безперервно записувати показники датчика протягом тривалого часу. Програму легко перенести на реальні IoT пристрої. Також, код програми було написано з найменшою можливою кількістю рядків для оптимізації під пристрої з обмеженими ресурсами.
 
3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для розробки IoT частини системи було обрано мову програмування C# завдяки її CLR компоненту .NET 8, який компілює код. Для створення та відправлення HTTP-запитів використовується бібліотека System.Net.Http, а для серіалізації та десеріалізації об'єктів застосовуються бібліотеки System.Text.Json та Newtonsoft.Json. Для більш детальної візуалізації використаних технологій було створено діаграму пакетів (див. рис. 2). 
Для детальнішої візуалізації взаємодії пристрою з користувачами системи була створена діаграма взаємодії (див. додаток А.1).
Крім того, побудована діаграма діяльності, яка показує взаємодію пристрою з сервером (див. додаток Б.1). 
Приклади коду IoT частини системи представлені в додатку В.

ВИСНОВКИ
Під час виконання лабораторної роботи були здобуті навички проєктування IoT частини програмної системи. Результатом роботи стала розроблена програмна реалізація IoT частини. При розробці продукту були дотримані принципи чистого коду на мові програмування C#.

1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

В розробленій системі можна виділити два типи акторів: адміністратор та батько.
До потреб батьків відносяться: 
•	можливість реєстрації;
•	можливість авторизації;
•	можливість отримання та зміни власної інформації;
•	можливість отримання інформації про дітей;
•	можливість отримання останніх даних за всіма типами датчиків у дитини;
•	можливість отримання статистики щодо показників дитини.
До потреб адміністратора відносяться:
•	можливість додавання, редагування, видалення користувачів;
•	можливість додавання, редагування, датчиків;
•	можливість додавання, редагування, видалення налаштувань датчиків;
•	можливість створення та завантаження резервних копій даних системи.
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. рис. А.1).
 
2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання клієнтської частини системи було обрано мову програмування TypeScript з використанням фреймворку Next.js, фреймворку для React, що забезпечує високу швидкість роботи додатку, зручність у розробці та тестуванні за рахунок статичної типізації TypeScript та підходу розділення компонентів. Також, Next.js надає власну, вже реалізовану систему навігації по сайту зі зручним використанням в будь якому місці коду, має власний компілятор.
Для реалізації елементів інтерфейсу було використано бібліотеку Material UI, бібліотеки з попередньо стилізованими компонентами, що ґрунтуються на рекомендаціях Google з дизайну.
Для реалізації локалізації інтерфейсу було використано бібліотеки i18next, next-i18n-router, що легко інтегруються до проекту, мають конфігурацію та реалізують зручну локалізацію.
Для виконання асинхронних запитів на сервер було axios, який дозволяє зручно взаємодіяти з HTTP-запитами.
У розробленій клієнтській частині проєкту використовується Feature-Sliced архітектура, яка визначає структуру проєкту за допомогою шарів. Шари включають зрізи, які в свою чергу включають сегменти. Шари – це каталоги верхнього рівня застосунку. У проєкті є 4 шари: app, components, hooks, utils. Шар app визначає основні сторінки додатку (сегменти) з використанням влаштованого навігатора від Next.Js, наприклад, сторінка login. Шар components визначає основні компоненти системи. Шар hooks визначає основні об’єкти хуків, які використовуються для отримання доступу до станів системи. Шар utils визначає основні компоненти утіліти проєкту, наприклад, створення axios.
Для кращого уявлення архітектури системи було створено діаграму компонентів (див. додат. А.2).
Взаємодія з програмною системою починається з авторизації  - або входу в уже існуючий акаунт, або його створення. Також, створити акаунт адміна неможливо. Після авторизації, згідно ролі користувача, взаємодія розділяється на клієнтську та адміністраторську.
Як батько, клієнт має можливість подивитись свої дані та змінити їх, встановивши ім’я та інформацію про контракт. Також, батьку доступна інформація про його дітей. Вони можут побачити ім’я дитини, дату народження, а також подивитись їхні дані. Для цього, батьку потрібно перейти на сторінку інформації дитини, на якій буде статистика останніх даних обраних датчиків у вигляді графіку. Також, батько зможе побачити всі дані з всіх датчиків дитини, включаючи дату створення.
Адміністратор має можливість виконувати керування даними системи з панелі адміністратора. Він може зберегти та завантажити дані системи, керувати користувачами системи, керувати датчиками системи, а також керувати налаштуваннями датчиків.
Для кращого уявлення про взаємодію користувачів з клієнтською частиною системи було розроблено діаграму взаємодії (див. додаток А.3).

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проектування клієнтської частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проектуванні бази даних. Результатом роботи є програмна реалізація клієнтської частини, розроблена з використанням Next.js.
